{
	"name": "customer-analysis-eda-report-clustering",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6a73aa4f-1979-4c75-91c8-5820864831cf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/43b4bb12-b882-46e7-93a4-0e6afb14206a/resourceGroups/Synapsecoe/providers/Microsoft.Synapse/workspaces/azuresynapsecoe/bigDataPools/Spark1",
				"name": "Spark1",
				"type": "Spark",
				"endpoint": "https://azuresynapsecoe.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:37.949710Z",
						"iopub.status.busy": "2021-10-10T08:47:37.948987Z",
						"iopub.status.idle": "2021-10-10T08:47:41.159717Z",
						"shell.execute_reply": "2021-10-10T08:47:41.158835Z",
						"shell.execute_reply.started": "2021-10-10T08:46:24.704148Z"
					},
					"papermill": {
						"duration": 3.266399,
						"end_time": "2021-10-10T08:47:41.159856",
						"exception": false,
						"start_time": "2021-10-10T08:47:37.893457",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Importing all the necessary libraries\n",
					"\n",
					"import numpy as np\n",
					"import pandas as pd\n",
					"import seaborn as sns\n",
					"import plotly.express as px\n",
					"import plotly.graph_objects as go\n",
					"import matplotlib.pyplot as plt\n",
					"%matplotlib inline\n",
					"import warnings\n",
					"warnings.filterwarnings('ignore')"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:41.319181Z",
						"iopub.status.busy": "2021-10-10T08:47:41.317867Z",
						"iopub.status.idle": "2021-10-10T08:47:41.574681Z",
						"shell.execute_reply": "2021-10-10T08:47:41.575793Z",
						"shell.execute_reply.started": "2021-10-10T08:46:27.757355Z"
					},
					"papermill": {
						"duration": 0.356915,
						"end_time": "2021-10-10T08:47:41.576012",
						"exception": false,
						"start_time": "2021-10-10T08:47:41.219097",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Reading and making a copy of the dataset\n",
					"df = pd.read_csv(\"abfss://azuresynapsebronze@azuresynapsecoe.dfs.core.windows.net/Raw/EDA/marketing_campaign.csv\", sep=\"\\t\")\n",
					"df.head()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.080963,
						"end_time": "2021-10-10T08:47:41.742527",
						"exception": false,
						"start_time": "2021-10-10T08:47:41.661564",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"### EDA"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:41.852174Z",
						"iopub.status.busy": "2021-10-10T08:47:41.851266Z",
						"iopub.status.idle": "2021-10-10T08:47:41.854075Z",
						"shell.execute_reply": "2021-10-10T08:47:41.854499Z",
						"shell.execute_reply.started": "2021-10-10T08:46:27.942496Z"
					},
					"papermill": {
						"duration": 0.058102,
						"end_time": "2021-10-10T08:47:41.854630",
						"exception": false,
						"start_time": "2021-10-10T08:47:41.796528",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Checking the shape of the dataset\n",
					"\n",
					"df.shape"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:41.979698Z",
						"iopub.status.busy": "2021-10-10T08:47:41.968098Z",
						"iopub.status.idle": "2021-10-10T08:47:41.983667Z",
						"shell.execute_reply": "2021-10-10T08:47:41.984084Z",
						"shell.execute_reply.started": "2021-10-10T08:46:27.951470Z"
					},
					"papermill": {
						"duration": 0.076193,
						"end_time": "2021-10-10T08:47:41.984239",
						"exception": false,
						"start_time": "2021-10-10T08:47:41.908046",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Finding the basic information regarding dataset\n",
					"\n",
					"df.info()"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.05019,
						"end_time": "2021-10-10T08:47:42.087478",
						"exception": false,
						"start_time": "2021-10-10T08:47:42.037288",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"* Here we have only 3 object type datatype and rest are numerical."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:42.193183Z",
						"iopub.status.busy": "2021-10-10T08:47:42.192334Z",
						"iopub.status.idle": "2021-10-10T08:47:42.209606Z",
						"shell.execute_reply": "2021-10-10T08:47:42.209135Z",
						"shell.execute_reply.started": "2021-10-10T08:46:27.990654Z"
					},
					"papermill": {
						"duration": 0.071631,
						"end_time": "2021-10-10T08:47:42.209723",
						"exception": false,
						"start_time": "2021-10-10T08:47:42.138092",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Finding the number of unique values present in each column\n",
					"\n",
					"df.nunique()"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.0516,
						"end_time": "2021-10-10T08:47:42.312704",
						"exception": false,
						"start_time": "2021-10-10T08:47:42.261104",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"**NOTE** \n",
					"* In above cell \"Z_CostContact\" and \"Z_Revenue\" have same value in all the rows that's why they are not going to contribute anything in the model building. So we can drop them.  "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:42.421439Z",
						"iopub.status.busy": "2021-10-10T08:47:42.417551Z",
						"iopub.status.idle": "2021-10-10T08:47:42.424271Z",
						"shell.execute_reply": "2021-10-10T08:47:42.424685Z",
						"shell.execute_reply.started": "2021-10-10T08:46:28.034377Z"
					},
					"papermill": {
						"duration": 0.062042,
						"end_time": "2021-10-10T08:47:42.424816",
						"exception": false,
						"start_time": "2021-10-10T08:47:42.362774",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Checking if any NaN is present in column or not\n",
					"\n",
					"df.isna().any()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.050988,
						"end_time": "2021-10-10T08:47:42.526649",
						"exception": false,
						"start_time": "2021-10-10T08:47:42.475661",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"* Income column have some missing value in it so we will need to fill it by by either mean or median."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:42.633181Z",
						"iopub.status.busy": "2021-10-10T08:47:42.632291Z",
						"iopub.status.idle": "2021-10-10T08:47:43.202067Z",
						"shell.execute_reply": "2021-10-10T08:47:43.201636Z",
						"shell.execute_reply.started": "2021-10-10T08:46:28.053201Z"
					},
					"papermill": {
						"duration": 0.625544,
						"end_time": "2021-10-10T08:47:43.202208",
						"exception": false,
						"start_time": "2021-10-10T08:47:42.576664",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Checking for null value using heatmap\n",
					"\n",
					"sns.heatmap(df.isnull())"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:43.334589Z",
						"iopub.status.busy": "2021-10-10T08:47:43.333850Z",
						"iopub.status.idle": "2021-10-10T08:47:43.337013Z",
						"shell.execute_reply": "2021-10-10T08:47:43.337509Z",
						"shell.execute_reply.started": "2021-10-10T08:46:28.926694Z"
					},
					"papermill": {
						"duration": 0.082149,
						"end_time": "2021-10-10T08:47:43.337665",
						"exception": false,
						"start_time": "2021-10-10T08:47:43.255516",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Dropping columns because they will not contribute anything in model building\n",
					"\n",
					"df=df.drop(columns=[\"Z_CostContact\", \"Z_Revenue\"],axis=1)\n",
					"df.head()"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:43.455096Z",
						"iopub.status.busy": "2021-10-10T08:47:43.454271Z",
						"iopub.status.idle": "2021-10-10T08:47:46.087152Z",
						"shell.execute_reply": "2021-10-10T08:47:46.087575Z",
						"shell.execute_reply.started": "2021-10-10T08:46:28.966204Z"
					},
					"papermill": {
						"duration": 2.691953,
						"end_time": "2021-10-10T08:47:46.087722",
						"exception": false,
						"start_time": "2021-10-10T08:47:43.395769",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Finding the correlation between the feature column\n",
					"\n",
					"plt.figure(figsize=(20,20))\n",
					"sns.heatmap(df.corr(), annot=True)\n",
					"plt.show()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.061601,
						"end_time": "2021-10-10T08:47:46.211100",
						"exception": false,
						"start_time": "2021-10-10T08:47:46.149499",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"* No two columns are too much correlated with each other so we can't drop any column on the basis of correlation."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.061667,
						"end_time": "2021-10-10T08:47:46.601159",
						"exception": false,
						"start_time": "2021-10-10T08:47:46.539492",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"### Preprocessing of the dataset"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:46.730909Z",
						"iopub.status.busy": "2021-10-10T08:47:46.730055Z",
						"iopub.status.idle": "2021-10-10T08:47:46.738257Z",
						"shell.execute_reply": "2021-10-10T08:47:46.737802Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.673511Z"
					},
					"papermill": {
						"duration": 0.07574,
						"end_time": "2021-10-10T08:47:46.738376",
						"exception": false,
						"start_time": "2021-10-10T08:47:46.662636",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Filling the missing value in the income my mean\n",
					"\n",
					"df['Income'] = df['Income'].fillna(df['Income'].mean())\n",
					"df.isna().any()"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:46.870126Z",
						"iopub.status.busy": "2021-10-10T08:47:46.869267Z",
						"iopub.status.idle": "2021-10-10T08:47:46.886422Z",
						"shell.execute_reply": "2021-10-10T08:47:46.886866Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.687518Z"
					},
					"papermill": {
						"duration": 0.086171,
						"end_time": "2021-10-10T08:47:46.887007",
						"exception": false,
						"start_time": "2021-10-10T08:47:46.800836",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"df.head()"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:47.018862Z",
						"iopub.status.busy": "2021-10-10T08:47:47.017979Z",
						"iopub.status.idle": "2021-10-10T08:47:47.025532Z",
						"shell.execute_reply": "2021-10-10T08:47:47.025110Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.716502Z"
					},
					"papermill": {
						"duration": 0.074821,
						"end_time": "2021-10-10T08:47:47.025656",
						"exception": false,
						"start_time": "2021-10-10T08:47:46.950835",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Checking number of unique categories present in the \"Marital_Status\"\n",
					"\n",
					"df['Marital_Status'].value_counts()  "
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:47.161438Z",
						"iopub.status.busy": "2021-10-10T08:47:47.160517Z",
						"iopub.status.idle": "2021-10-10T08:47:47.162611Z",
						"shell.execute_reply": "2021-10-10T08:47:47.163080Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.726253Z"
					},
					"papermill": {
						"duration": 0.074216,
						"end_time": "2021-10-10T08:47:47.163231",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.089015",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"df['Marital_Status'] = df['Marital_Status'].replace(['Married', 'Together'],'relationship')\n",
					"df['Marital_Status'] = df['Marital_Status'].replace(['Divorced', 'Widow', 'Alone', 'YOLO', 'Absurd'],'Single')"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.073316,
						"end_time": "2021-10-10T08:47:47.302614",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.229298",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"* In the above cell we are grouping 'Married', 'Together' as \"relationship\" \n",
					"* Whereas 'Divorced', 'Widow', 'Alone', 'YOLO', 'Absurd' as \"Single\""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:47.440871Z",
						"iopub.status.busy": "2021-10-10T08:47:47.440285Z",
						"iopub.status.idle": "2021-10-10T08:47:47.442928Z",
						"shell.execute_reply": "2021-10-10T08:47:47.443337Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.739215Z"
					},
					"papermill": {
						"duration": 0.072473,
						"end_time": "2021-10-10T08:47:47.443469",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.370996",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Count of different values present in Marital_Status\n",
					"\n",
					"df['Marital_Status'].value_counts()  "
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:47.577687Z",
						"iopub.status.busy": "2021-10-10T08:47:47.573875Z",
						"iopub.status.idle": "2021-10-10T08:47:47.597992Z",
						"shell.execute_reply": "2021-10-10T08:47:47.597013Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.749372Z"
					},
					"papermill": {
						"duration": 0.092328,
						"end_time": "2021-10-10T08:47:47.598110",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.505782",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Combining different dataframe into a single column to reduce the number of dimension\n",
					"\n",
					"df['Kids'] = df['Kidhome'] + df['Teenhome']\n",
					"df['Expenses'] = df['MntWines'] + df['MntFruits'] + df['MntMeatProducts'] + df['MntFishProducts'] + df['MntSweetProducts'] + df['MntGoldProds']\n",
					"df['TotalAcceptedCmp'] = df['AcceptedCmp1'] + df['AcceptedCmp2'] + df['AcceptedCmp3'] + df['AcceptedCmp4'] + df['AcceptedCmp5'] + df['Response']\n",
					"df['NumTotalPurchases'] = df['NumWebPurchases'] + df['NumCatalogPurchases'] + df['NumStorePurchases'] + df['NumDealsPurchases']"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:47.729642Z",
						"iopub.status.busy": "2021-10-10T08:47:47.728796Z",
						"iopub.status.idle": "2021-10-10T08:47:47.742696Z",
						"shell.execute_reply": "2021-10-10T08:47:47.743134Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.774632Z"
					},
					"papermill": {
						"duration": 0.082491,
						"end_time": "2021-10-10T08:47:47.743285",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.660794",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Deleting some column to reduce dimension and complexity of model\n",
					"\n",
					"col_del = [\"AcceptedCmp1\" , \"AcceptedCmp2\", \"AcceptedCmp3\" , \"AcceptedCmp4\",\"AcceptedCmp5\", \"Response\",\"NumWebVisitsMonth\", \"NumWebPurchases\",\"NumCatalogPurchases\",\"NumStorePurchases\",\"NumDealsPurchases\" , \"Kidhome\", \"Teenhome\",\"MntWines\", \"MntFruits\", \"MntMeatProducts\", \"MntFishProducts\", \"MntSweetProducts\", \"MntGoldProds\"]\n",
					"df=df.drop(columns=col_del,axis=1)\n",
					"df.head()"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:47.881193Z",
						"iopub.status.busy": "2021-10-10T08:47:47.880210Z",
						"iopub.status.idle": "2021-10-10T08:47:47.882061Z",
						"shell.execute_reply": "2021-10-10T08:47:47.882549Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.794557Z"
					},
					"papermill": {
						"duration": 0.074906,
						"end_time": "2021-10-10T08:47:47.882698",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.807792",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Adding a column \"Age\" in the dataframe\n",
					"\n",
					"df['Age'] = 2015 - df[\"Year_Birth\"]"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:48.018408Z",
						"iopub.status.busy": "2021-10-10T08:47:48.017731Z",
						"iopub.status.idle": "2021-10-10T08:47:48.020600Z",
						"shell.execute_reply": "2021-10-10T08:47:48.021005Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.802183Z"
					},
					"papermill": {
						"duration": 0.07468,
						"end_time": "2021-10-10T08:47:48.021144",
						"exception": false,
						"start_time": "2021-10-10T08:47:47.946464",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"df['Education'].value_counts()"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:48.160826Z",
						"iopub.status.busy": "2021-10-10T08:47:48.160090Z",
						"iopub.status.idle": "2021-10-10T08:47:48.163616Z",
						"shell.execute_reply": "2021-10-10T08:47:48.163179Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.814466Z"
					},
					"papermill": {
						"duration": 0.077692,
						"end_time": "2021-10-10T08:47:48.163745",
						"exception": false,
						"start_time": "2021-10-10T08:47:48.086053",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"# Changing category into UG and PG only\n",
					"\n",
					"df['Education'] = df['Education'].replace(['PhD','2n Cycle','Graduation', 'Master'],'PG')  \n",
					"df['Education'] = df['Education'].replace(['Basic'], 'UG')"
				],
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.066648,
						"end_time": "2021-10-10T08:47:48.587937",
						"exception": false,
						"start_time": "2021-10-10T08:47:48.521289",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"### Visualization"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:48.726541Z",
						"iopub.status.busy": "2021-10-10T08:47:48.725843Z",
						"iopub.status.idle": "2021-10-10T08:47:49.589445Z",
						"shell.execute_reply": "2021-10-10T08:47:49.589859Z",
						"shell.execute_reply.started": "2021-10-10T08:46:31.853965Z"
					},
					"papermill": {
						"duration": 0.934965,
						"end_time": "2021-10-10T08:47:49.590001",
						"exception": false,
						"start_time": "2021-10-10T08:47:48.655036",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.bar(df, x='Marital_Status', y='Expenses', color=\"Education\")\n",
					"fig.show()"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:49.738613Z",
						"iopub.status.busy": "2021-10-10T08:47:49.733992Z",
						"iopub.status.idle": "2021-10-10T08:47:49.964751Z",
						"shell.execute_reply": "2021-10-10T08:47:49.964304Z",
						"shell.execute_reply.started": "2021-10-10T08:46:32.691770Z"
					},
					"papermill": {
						"duration": 0.30916,
						"end_time": "2021-10-10T08:47:49.964877",
						"exception": false,
						"start_time": "2021-10-10T08:47:49.655717",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.bar(df, x='Marital_Status', y='Expenses', color=\"Marital_Status\")\n",
					"fig.show()"
				],
				"execution_count": 44
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.066178,
						"end_time": "2021-10-10T08:47:50.098620",
						"exception": false,
						"start_time": "2021-10-10T08:47:50.032442",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"**Less number of single customer**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:50.237160Z",
						"iopub.status.busy": "2021-10-10T08:47:50.236212Z",
						"iopub.status.idle": "2021-10-10T08:47:50.362662Z",
						"shell.execute_reply": "2021-10-10T08:47:50.363060Z",
						"shell.execute_reply.started": "2021-10-10T08:46:32.947605Z"
					},
					"papermill": {
						"duration": 0.198057,
						"end_time": "2021-10-10T08:47:50.363199",
						"exception": false,
						"start_time": "2021-10-10T08:47:50.165142",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.histogram (df, x = \"Expenses\",  facet_row = \"Marital_Status\",  template = 'plotly_dark')\n",
					"fig.show ()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:50.505299Z",
						"iopub.status.busy": "2021-10-10T08:47:50.504438Z",
						"iopub.status.idle": "2021-10-10T08:47:50.574907Z",
						"shell.execute_reply": "2021-10-10T08:47:50.575316Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.092339Z"
					},
					"papermill": {
						"duration": 0.14459,
						"end_time": "2021-10-10T08:47:50.575453",
						"exception": false,
						"start_time": "2021-10-10T08:47:50.430863",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.histogram (df, x = \"Expenses\",  facet_row = \"Education\",  template = 'plotly_dark')\n",
					"fig.show ()"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:50.729193Z",
						"iopub.status.busy": "2021-10-10T08:47:50.728046Z",
						"iopub.status.idle": "2021-10-10T08:47:50.794847Z",
						"shell.execute_reply": "2021-10-10T08:47:50.795270Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.179135Z"
					},
					"papermill": {
						"duration": 0.151045,
						"end_time": "2021-10-10T08:47:50.795414",
						"exception": false,
						"start_time": "2021-10-10T08:47:50.644369",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.histogram (df, x = \"NumTotalPurchases\",  facet_row = \"Education\",  template = 'plotly_dark')\n",
					"fig.show ()"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:50.951015Z",
						"iopub.status.busy": "2021-10-10T08:47:50.950164Z",
						"iopub.status.idle": "2021-10-10T08:47:51.015620Z",
						"shell.execute_reply": "2021-10-10T08:47:51.016027Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.266163Z"
					},
					"papermill": {
						"duration": 0.150013,
						"end_time": "2021-10-10T08:47:51.016169",
						"exception": false,
						"start_time": "2021-10-10T08:47:50.866156",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.histogram (df, x = \"Age\",  facet_row = \"Marital_Status\",  template = 'plotly_dark')\n",
					"fig.show ()"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:51.173457Z",
						"iopub.status.busy": "2021-10-10T08:47:51.172615Z",
						"iopub.status.idle": "2021-10-10T08:47:51.239737Z",
						"shell.execute_reply": "2021-10-10T08:47:51.240142Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.351187Z"
					},
					"papermill": {
						"duration": 0.154064,
						"end_time": "2021-10-10T08:47:51.240301",
						"exception": false,
						"start_time": "2021-10-10T08:47:51.086237",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig = px.histogram (df, x = \"Income\",  facet_row = \"Marital_Status\",  template = 'plotly_dark')\n",
					"fig.show ()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.072736,
						"end_time": "2021-10-10T08:47:51.580010",
						"exception": false,
						"start_time": "2021-10-10T08:47:51.507274",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"**35% of the customer are single whereas more 64% are in relationship.**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:51.732371Z",
						"iopub.status.busy": "2021-10-10T08:47:51.731504Z",
						"iopub.status.idle": "2021-10-10T08:47:51.776991Z",
						"shell.execute_reply": "2021-10-10T08:47:51.777450Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.495167Z"
					},
					"papermill": {
						"duration": 0.125252,
						"end_time": "2021-10-10T08:47:51.777593",
						"exception": false,
						"start_time": "2021-10-10T08:47:51.652341",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"fig =  px.pie (df, names = \"Education\", hole = 0.4, template = \"plotly_dark\")\n",
					"fig.show ()"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"papermill": {
						"duration": 0.072679,
						"end_time": "2021-10-10T08:47:51.925015",
						"exception": false,
						"start_time": "2021-10-10T08:47:51.852336",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"** More than 97% customer are from PG background. and Approx. 2% are from UG."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:52.078366Z",
						"iopub.status.busy": "2021-10-10T08:47:52.075145Z",
						"iopub.status.idle": "2021-10-10T08:47:52.377434Z",
						"shell.execute_reply": "2021-10-10T08:47:52.378301Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.550861Z"
					},
					"papermill": {
						"duration": 0.381336,
						"end_time": "2021-10-10T08:47:52.378538",
						"exception": false,
						"start_time": "2021-10-10T08:47:51.997202",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"sns.barplot(x = df['Expenses'],y = df['Education']);\n",
					"plt.title('Total Expense based on the Education Level');"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:52.665343Z",
						"iopub.status.busy": "2021-10-10T08:47:52.662588Z",
						"iopub.status.idle": "2021-10-10T08:47:52.960548Z",
						"shell.execute_reply": "2021-10-10T08:47:52.960104Z",
						"shell.execute_reply.started": "2021-10-10T08:46:33.804207Z"
					},
					"papermill": {
						"duration": 0.448471,
						"end_time": "2021-10-10T08:47:52.960670",
						"exception": false,
						"start_time": "2021-10-10T08:47:52.512199",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"sns.barplot(x = df['Income'],y = df['Education']);\n",
					"plt.title('Total Income based on the Education Level');"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"execution": {
						"iopub.execute_input": "2021-10-10T08:47:53.121083Z",
						"iopub.status.busy": "2021-10-10T08:47:53.120516Z",
						"iopub.status.idle": "2021-10-10T08:47:53.144994Z",
						"shell.execute_reply": "2021-10-10T08:47:53.145836Z",
						"shell.execute_reply.started": "2021-10-10T08:46:34.047438Z"
					},
					"papermill": {
						"duration": 0.109333,
						"end_time": "2021-10-10T08:47:53.145995",
						"exception": false,
						"start_time": "2021-10-10T08:47:53.036662",
						"status": "completed"
					},
					"tags": []
				},
				"source": [
					"df.describe()"
				],
				"execution_count": 53
			}
		]
	}
}